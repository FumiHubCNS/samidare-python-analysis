"""!
@file savefig_util.py
@version 1
@author Fumitaka ENDO
@date 2025-09-07T23:26:17+09:00
@brief save figure generated by matplotlib.plotly
"""
from __future__ import annotations
from pathlib import Path
import time
import datetime as dt
from PIL import Image
import glob
import os
import os, time, datetime as dt, glob
from PIL import Image
from typing import Iterable

# --- 共通ヘルパー ------------------------------------------------------------

def _default_image_path(base_dir: str | Path, ext: str = ".png") -> Path:
    """
    base_dir/YYYYMMDD/epochtime.ext を生成し、ディレクトリが無ければ作る。
    """
    base = Path(base_dir)
    date_dir = dt.datetime.now().strftime("%Y%m%d")
    out_dir = base / date_dir
    out_dir.mkdir(parents=True, exist_ok=True)
    epoch = int(time.time())  # 秒
    return out_dir / f"{epoch}{ext}"

def _normalize_target_path(path: str | Path | None, base_dir: str | Path, ext: str) -> Path:
    """
    path が None ならデフォルト名を作る。指定がある場合は拡張子を補完。
    """
    if path is None:
        return _default_image_path(base_dir, ext)
    p = Path(path)
    if not p.suffix:
        p = p.with_suffix(ext)
    p.parent.mkdir(parents=True, exist_ok=True)
    return p

# --- Matplotlib 用 -----------------------------------------------------------

def save_matplotlib(fig, *, base_dir: str | Path, path: str | Path | None = None,
                    ext: str = ".png", dpi: int = 150, transparent: bool = False) -> Path:
    """
    Matplotlib Figure を保存。
    """
    target = _normalize_target_path(path, base_dir, ext)
    fig.savefig(target, dpi=dpi, bbox_inches="tight", transparent=transparent)
    return target

# --- Plotly 用 ---------------------------------------------------------------

def save_plotly(fig, *, base_dir: str | Path, path: str | Path | None = None,
                ext: str = ".png", scale: int = 2) -> Path:
    """
    Plotly Figure を保存。kaleido が無ければ .html にフォールバック。
    """
    target = _normalize_target_path(path, base_dir, ext)
    try:
        # png/svg/pdf は kaleido が必要
        fig.write_image(str(target), scale=scale)
        return target
    except Exception:
        # フォールバック：静的画像が無理なら HTML で保存
        html_target = target.with_suffix(".html")
        fig.write_html(str(html_target), include_plotlyjs="cdn")
        return html_target

def generate_gif(
    input_dir: str | Path,
    output_dir: str | Path,
    duration_s: float = 0.1,
    pattern: str = "*.png",        # フレーム画像の拡張子パターン（例: "*.png", "*.jpg"）
    sort_by: str = "ctime",         # "ctime"（作成時刻） or "name"（ファイル名ソート）
) -> Path:
    """
    input_dir 内の画像を並べて GIF を生成し、output_dir/{YYYYMMDD}/{epochtime}.gif として保存。
    duration_s は 1フレームの表示時間（秒）。
    """
    input_dir  = Path(input_dir)
    output_dir = Path(output_dir)

    if not input_dir.is_dir():
        raise NotADirectoryError(f"input_dir not found: {input_dir}")
    if not output_dir.exists():
        output_dir.mkdir(parents=True, exist_ok=True)

    # 出力ディレクトリ: {output_dir}/{YYYYMMDD}
    day = dt.datetime.now().strftime("%Y%m%d")
    day_dir = output_dir / day
    day_dir.mkdir(parents=True, exist_ok=True)

    # 出力ファイル名: {epochtime}.gif
    epoch = str(int(time.time()))
    out_path = day_dir / f"{epoch}.gif"

    # 画像フレームを集める（※ここがポイント：ディレクトリではなくパターン指定）
    paths = list(input_dir.glob(pattern))

    if not paths:
        raise ValueError(f"No frames found in {input_dir} with pattern '{pattern}'")

    # フレーム順序
    if sort_by == "ctime":
        paths.sort(key=lambda p: p.stat().st_ctime)
    elif sort_by == "name":
        paths.sort(key=lambda p: p.name)
    else:
        raise ValueError("sort_by must be 'ctime' or 'name'")

    # 画像を開く（RGBA にして差異を吸収）
    images = [Image.open(p).convert("RGBA") for p in paths]

    # 秒 → ミリ秒（Pillow の duration はミリ秒）
    duration_ms = max(1, int(round(duration_s * 1000)))

    # GIF 保存
    images[0].save(
        out_path,
        save_all=True,
        append_images=images[1:],
        duration=duration_ms,
        loop=0,
        disposal=2,  # 前フレームを消去（残像防止）
    )

    # 後始末（明示的にクローズ）
    for im in images:
        try:
            im.close()
        except Exception:
            pass

    print(f"[gif] saved -> {out_path}")
    return out_path
